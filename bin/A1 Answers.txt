0: Renamed to Group4

1: [Done.]

2: [Done.]

3: [Done.]

4: 773ms

5a: [Done1.]

5b: 1325ms

 English: What advantages and disadvantages does serialization have on your code, on performance, or 
on maintenance?  Take a look at http://www.ibm.com/developerworks/library/j-5things1/ before you answer.

6: Serialization, while it takes a little bit longer, allows us to make changes to the class and still be able to read older data. Serialization is also not secure, so anybody could take the serialized object(s) and rebuild the data UNLESS the programmer intentionally obscures the data.	

7: [Done.]

8a: The benefits of storing all employees in a single, serialized file are it makes reading the data from disk a lot simpler because you don't have to deal with making sure you have the right name for each of the employees files, they're all right there. And if you include an index, searching can be done much easier, and when you compare the size of all 10000 employee files to the single hashmap file, the size difference (1.02MB vs 431KB) is staggering, and heavily in favor of the single file.

8b: Honestly, not that much. Because the file itself is only 400Kb, I can load it directly into memory and deserialize it from there, using only 600MB total

9: If I were starting cold and only needed *one* employee and I knew exactly which one, I'd prefer having the employees in separate files to I can just read that file.

10: [Done.]

11: [Done.] After struggling on how to approach the solution for 10, I actually peeked ahead to 11 and saw the Index idea, and used it instead of what I would have done, which would have been much less efficient.

12: In it's current state, I would have to read the entire HashMap file in, get the highest id, run the add method for the new employee and biggest id +1.

13: I serialized the index within the hashmap container class so it is loaded with the hashmap, making data retrieval much quicker, even if the file loads a fraction of a second slower.

14: [Done.] 

15: It's slower per Employee due to the additional information having to be loaded in with the rest of the object.

16: 400Mb

17: From the methods only used in the assignment, I'd be tempted to store them into separate files to decrease the load times per item, but I'd probably still store them into a serialized hashmap (with an index) just so I can search through them much quicker once they're loaded.

  English: Does knowing that you can serialize the employee data to JSON and XML affect your answers to question 17?
Under what circumstances should we change the text or serialized versions to XML or JSON? 

18: Depending on how much data each object would have, I'd probably lean towards JSON. Inside JSON you don't ever have to define what data type the property is, because everything is key/value, and because it's not whitespace sensitive, you can store the entire thing on one line to decrease disk space usage.
Assignment 1

Complete all coding work in your A1 Groups.  Group LMS submission of code.

****
All English answers are to be answered **individually through an LMS quiz.**  
One quiz submission per person.
****



Assignment Objectives:
Experience the following:
	* Time it takes to open thousands of text files
	* That searching by a loop on text is slow
	* Indexing has to be maintained
	* Options, advantages and disadvantages of serializing collections

For de-serialization, use the provided Employee and LargeEmployee files.  You should not need to change either of these files 
in this assignment.

0.  Rename the renametoyourgroupnumber package to "edu.neumont.dbt230.a1.groupX, where X is your group number.

1.  Code (already done for you - See A1Start.main and EmployeeTextFileDataAccess.q1_printEmployeesText): Print the data contained in each file in "\simple\" to the console.

2.  Code (already done for you - See main and q2_printEmployees): Instead of printing the text from those files, create an Employee instance from the
data in the files and use the Employee's toString method to print each employee's data to the console.

3.  Code (Expand on the code from Q2): Add code to the Q2 solution to iterate through the files in \long\ and print the 
Employee data they contain.  Include the total performance time in your sysout. 
(See https://www.mkyong.com/java/how-do-calculate-elapsed-execute-time-in-java/)

4.  English: What was the performance time, in milliseconds, for 3?    

5.a)  Code (done for you, see EmployeeSerializedDataAccess.java): Use \long serialized\ instead to see if reading from a serialized version of Employee
affects performance.

5.b) English: What was the performance time, in milliseconds, for 5a?

6.  English: What advantages and disadvantages does serialization have on your code, on performance, or 
on maintenance?  Take a look at http://www.ibm.com/developerworks/library/j-5things1/ before you answer.

7.  Code (add classes, methods): What about storing all those employees in a single file, instead of 10,000 files?  Instead of 
simply writing the data for 10,000 employees to the console, create a HashMap of employees and serialize _that_ to disk.
Use the employee id (either from the file name or the int at the beginning of the file) for your key.
See https://beginnersbook.com/2013/12/hashmap-in-java-with-example/

8.a)  English: What advantages and disadvantages does storing all 10,000 employees in a single serialized HashMap have 
on your code, on performance, or on maintenance? (Use your same performance routine to compare).

8.b) English: What happens to memory utilization in your application when loading a large hashmap of employees 
at application startup?

9.  English: Assume your application is starting cold, and you'll need to print the data for employee id 1001.  Which 
approach to storing and accessing data would you select, and why?

10.  Code (add classes, methods): Print the employee id of Laurie Martin, hired in 2006.

11.  Code (add classes, methods): Does your solution to 10 feel inefficient?  Have you thought of maintaining some kind 
of index to speed searching by last name?  Create one so you only have to iterate through the employees once, 
thereafter using the index for lookup. The hash map you created in 7, for example, is indexed by employee id, allowing
you to find employees by their id quickly, but still having to iterate to find them by name.  What we need here
is a way to find employees quickly by their name.

12.  English: What happens to your index if the user adds 100 more employees?  How will you update it?

13.  English: Will you serialize and store your index, or build it on the fly for each query?  Or build it on each run of the 
application?  Why?  

14.  Code (add classes, methods): Our Employee class just got a little larger!  For a reason unknown to us, the 
Employee class has a byte array of data that we must store and retrieve.  Using \large\ and \large serialized\, 
print all the employee data EXCEPT the byte array to the console. 

15.  English: What is the performance time of the larger employee class on loading times for text and serialized versions?  

16.  English: Each Employee file takes up 40KB on disk.  How much space would our original 10,000 employees take up on disk?

17.  English: How does the increase in data stored per employee instance affect your response to 6 (serializing and storing
all employees to a single file or storing/loading them all in a HashMap)?

17.  English: Now that we must store a large(r) amount of data per employee, which storage mechanism will you select from
the examples we've used and practiced with in this assignment, and why?
(single file? N files? Serialized? Serialized collection? etc.)  Remember to explain _why_.

18.  English: Does knowing that you can serialize the employee data to JSON and XML affect your answers to question 17?
Under what circumstances should we change the text or serialized versions to XML or JSON? 



 



 
